ENV DEBIAN_FRONTEND noninteractive

# Install common dependencies (so that this step can be cached separately)
ENV UBUNTU_VERSION=20.04
ENV CMAKE_VERSION=3.18.5
ENV CUDA_VERSION=12.1.1
ENV CUDNN_VERSION=8
ENV ANACONDA_PYTHON_VERSION=3.10
ENV GCC_VERSION=9
ENV CLANG_VERSION=12
ENV PROTOBUF=yes
ENV DB=yes
ENV VISION=yes
ENV KATEX=yes
ENV UCX_COMMIT=00bcc6bb18fc282eb160623b4c0d300147f579af
ENV UCC_COMMIT=7cb07a76ccedad7e56ceb136b865eb9319c258ea
ENV CONDA_CMAKE=yes
ENV TRITON=yes
ENV INDUCTOR_BENCHMARKS=yes
ENV BUILD_ENVIRONMENT="pytorch-linux-focal-cuda12.1-cudnn8-py3-gcc9"
ENV PATH=/opt/conda/envs/py_$ANACONDA_PYTHON_VERSION/bin:/opt/conda/bin:$PATH

ENV all_proxy=socks5://10.1.0.34:7890
ENV http_proxy=http://10.1.0.34:7890
ENV https_proxy=http://10.1.0.34:7890

COPY ci-docker-installer.tgz docker_installer.tgz
RUN mkdir -p /installer && tar -xvf docker_installer.tgz -C /installer

WORKDIR /installer

# Install base
RUN bash ./install_base.sh

# Install gcc
RUN bash ./install_gcc.sh

# Install clang
RUN bash ./install_clang.sh

# Install conda and other packages (e.g., numpy, pytest)
ENV PATH /opt/conda/envs/py_$ANACONDA_PYTHON_VERSION/bin:/opt/conda/bin:$PATH
RUN mkdir -p /opt/conda && cp ./requirements-ci.txt /opt/conda/requirements-ci.txt && bash ./install_conda.sh

ENV OPENSSL_ROOT_DIR /opt/openssl
RUN bash ./install_openssl.sh
ENV OPENSSL_DIR /opt/openssl

RUN bash ./install_inductor_benchmark_deps.sh

# (optional) Install non-default CMake version
RUN bash ./install_cmake.sh

# Install triton, this needs to be done before sccache because the latter will
# try to reach out to S3, which docker build runners don't have access
RUN bash ./install_triton.sh

# Install ccache/sccache (do this last, so we get priority in PATH)
ENV PATH /opt/cache/bin:$PATH
# See https://github.com/pytorch/pytorch/issues/82174
# TODO(sdym@fb.com):
# check if this is needed after full off Xenial migration
ENV CARGO_NET_GIT_FETCH_WITH_CLI true
RUN bash ./install_cache.sh
ENV CMAKE_CUDA_COMPILER_LAUNCHER /opt/cache/bin/sccache


# Install Open MPI for CUDA
RUN bash ./install_openmpi.sh

# Install LLVM dev version (Defined in the pytorch/builder github repository)
COPY llvm.tgz llvm.tgz
RUN tar xzvf llvm.tgz -C / && rm llvm.tgz

# Install CUDNN
RUN if [ "${CUDNN_VERSION}" -eq 8 ]; then bash ./install_cudnn.sh; fi


# Delete /usr/local/cuda-11.X/cuda-11.X symlinks
RUN if [ -h /usr/local/cuda-11.6/cuda-11.6 ]; then rm /usr/local/cuda-11.6/cuda-11.6; fi
RUN if [ -h /usr/local/cuda-11.7/cuda-11.7 ]; then rm /usr/local/cuda-11.7/cuda-11.7; fi
RUN if [ -h /usr/local/cuda-12.1/cuda-12.1 ]; then rm /usr/local/cuda-12.1/cuda-12.1; fi

# RUN apt-get update \

# && apt-get install -yq --no-install-recommends tzdata \

# && apt-get install -y openssh-server && mkdir -p /run/sshd

RUN mkdir -p /workspace

WORKDIR /workspace

CMD ["bash"]